searchState.loadedDescShard("xrpl", 0, "Utilities for interacting with the XRP Ledger.\nCollection of public constants for XRPL.\nCore codec functions for interacting with the XRPL.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTop-level modules for the models package.\nA macro to tag a struct externally. With <code>serde</code> attributes, …\nConvenience utilities for the XRP Ledger\nMethods for working with XRPL wallets.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate a random id.\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLength of an account id.\nRepresents the supported cryptography algorithms.\nAn iterator over the variants of CryptoAlgorithm\nRegular expression for determining hex currency codes.\nRegular expression for determining ISO currency codes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis module contains commonly-used constants.\nFunctions for encoding objects into the XRP Ledger’s …\nCore codec functions for interacting with the XRPL.\nReturns the X-Address representation of the data.\nReturns the decoded bytes of the node public key.\nReturns the decoded bytes of the classic address.\nReturns the decoded bytes of the node public key.\nReturns an encoded seed.\nReturns the account public key encoding of these bytes as …\nReturns the classic address encoding of these bytes as a …\nReturns the node public key encoding of these bytes as a …\nReturns an encoded seed.\nGeneral XRPL Address Codec Exception.\nReturns whether <code>classic_address</code> is a valid classic address.\nReturns whether <code>xaddress</code> is a valid X-Address.\nThis module contains commonly-used utilities.\nReturns a tuple containing the classic address, tag, and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLenght of a seed value.\nThe dictionary used for XRPL base58 encodings Sourced from …\nReturns the byte decoding of the base58-encoded string.\nReturns the base58 encoding of the bytestring, with the …\nFunctions for encoding objects into the XRP Ledger’s …\nGeneral XRPL Binary Codec Exceptions.\nTop-level exports for types used in binary_codec.\nUtilities for binarycodec crate.\nDeserializes from hex-encoded XRPL binary format to serde …\nSerializes JSON to XRPL binary format.\nWrite given bytes to this BinarySerializer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns whether the binary parser has finished parsing …\nPeek the first byte of the BinaryParser.\nConsume and return the first n bytes of the BinaryParser.\nRead the field ordinal at the head of the BinaryParser and …\nReads field ID from BinaryParser and returns as a …\nRead value of the type specified by field from the …\nReads a variable length encoding prefix and returns the …\nRead next bytes from BinaryParser as the given type.\nRead 2 bytes from parser and return as unsigned int.\nRead 4 bytes from parser and return as unsigned int.\nRead 1 byte from parser and return as unsigned int.\nConsume the first n bytes of the BinaryParser.\nWrite field and value to the buffer.\nWrite a variable length encoded value to the …\nA container class for simultaneous storage of a field’s …\nModel object for field info metadata from the “fields” …\nA collection of serialization information about a specific …\nConvert the FieldHeader to a String.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the field is presented in binary serialized …\nIf the field should be included in signed transactions.\nWhether the serialized length of this field varies.\nCreate a new FieldInstance.\nThe field code – sort order position for fields of the …\nConvert the FieldHeader to a Vec.\nThe name of this field’s serialization type, e.g. …\nMaps and helpers providing serialization-related …\nLoads JSON from the definitions file and converts it to a …\n=(\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the field code associated with the given field.\nReturns the field code associated with the given field.\nReturns a FieldHeader object for a field of the given …\nReturns a FieldHeader object for a field of the given …\nGet a FieldInfo object from a field name.\nReturn a FieldInstance object for the given field name.\nReturn a FieldInstance object for the given field name.\nReturns the field name described by the given FieldHeader …\nReturns the field name described by the given FieldHeader …\nReturns the type code associated with the given field.\nReturns the type code associated with the given field.\nReturns the serialization data type for the given field …\nReturns the serialization data type for the given field …\nReturn an integer representing the given ledger entry type …\nReturn an integer representing the given ledger entry type …\nReturn an integer representing the given ledger entry type …\nReturn string representing the given ledger entry type …\nReturn an integer representing the given transaction …\nReturn an integer representing the given transaction …\nReturn string representing the given transaction result …\nReturn string representing the given transaction result …\nReturn an integer representing the given transaction type …\nReturn an integer representing the given transaction type …\nReturn an integer representing the given transaction type …\nReturn string representing the given transaction type from …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieve the definition map.\nCreate a new instance of a definition handler using a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nError type for implementing type.\nError type for implementing type.\nClass for serializing and deserializing Lists of objects.\nClass for serializing/deserializing Indexmaps of objects.\nContains a serialized buffer of a Serializer type.\nConverter for transforming a BinaryParser into a type.\nAn XRPL Type will implement this trait.\nCodec for currency property inside an XRPL issued currency …\nCodec for serializing and deserializing Amount fields.\nGet a reference of the byte representation.\nCodec for serializing and deserializing blob fields.\nCodec for currency property inside an XRPL issued currency …\nException for invalid XRP Ledger type data.\nGet the hex representation of the SerializedType bytes.\nReturns the argument unchanged.\nCreate a SerializedType from a Vec.\nCreate a serialized type from an XRPLType.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a type from a BinaryParser.\nBase class for XRPL Hash types.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of a type.\nCodec for serializing and deserializing PathSet fields.\nCreate a SerializedArray from a serde_json::Value.\nCreate a SerializedMap from a serde_json::Value.\nCodec for serializing and deserializing vectors of Hash256.\nCodec for serializing and deserializing AccountID fields.\nGet a reference of the byte representation.\nReturn the classic address of the AccountId bytes.\nReturns the argument unchanged.\nBuild AccountId from a BinaryParser.\nCalls <code>U::from(self)</code>.\nConstruct an AccountID from given bytes. If buffer is not …\nReturn the value of this AccountID encoded as a base58 …\nConstruct an AccountId from a hex string or a base58 …\nCodec for serializing and deserializing Amount fields.\nGet a reference of the byte representation.\nReturns the argument unchanged.\nBuild Amount from a BinaryParser.\nCalls <code>U::from(self)</code>.\nReturns True if this amount is a native XRP amount.\nReturns true if 2nd bit in 1st byte is set to 1 (positive …\nConstruct an Amount from given bytes.\nConstruct a JSON object representing this Amount.\nNormally when using bigdecimal “serde_json” feature a <code>1</code>…\nConstruct an Amount object from a hex string.\nConstruct an Amount object from a Serde JSON Value.\nCodec for serializing and deserializing blob fields.\nGet a reference of the byte representation.\nGet the hex representation of the Blob bytes.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstruct a Blob from a hex string.\nCodec for serializing and deserializing vectors of Hash256.\nGet a reference of the byte representation.\nGet the ISO or hex representation of the Currency bytes.\nReturns the argument unchanged.\nBuild Currency from a BinaryParser.\nCalls <code>U::from(self)</code>.\nReturns the JSON representation of a currency.\nConstruct a Currency object from a string representation …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nXRPL Hash type.\nCodec for serializing and deserializing a hash field with …\nCodec for serializing and deserializing a hash field with …\nCodec for serializing and deserializing a hash field with …\nGet a reference of the byte representation.\nGet a reference of the byte representation.\nGet a reference of the byte representation.\nGet the hex representation of the Hash128 bytes.\nGet the hex representation of the Hash160 bytes.\nGet the hex representation of the Hash256 bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild Hash128 from a BinaryParser.\nBuild Hash160 from a BinaryParser.\nBuild Hash256 from a BinaryParser.\nGet the length of the hash.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake a new hash of type T. Useful for extending new Hash …\nParse a hash type from a binary parser.\nConstruct a Hash object from a hex string.\nConstruct a Hash object from a hex string.\nConstruct a Hash object from a hex string.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nClass for serializing/deserializing Paths.\nClass for serializing/deserializing Paths.\nSerialize and deserialize a single step in a Path.\nGet a reference of the byte representation.\nGet a reference of the byte representation.\nGet a reference of the byte representation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild PathStep from a BinaryParser.\nBuild Path from a BinaryParser.\nBuild PathSet from a BinaryParser.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the JSON representation of a PathStep.\nReturns the JSON representation of a Path.\nReturns the JSON representation of a Path.\nConstruct a PathSet object from a string.\nConstruct a PathStep object from a dictionary.\nConstruct a Path object from a list.\nConstruct a Path object from a string.\nConstruct a PathSet object from a string.\nConstruct a PathSet object from a list.\nLength of a currency code.\nCodec for serializing and deserializing vectors of Hash256.\nGet a reference of the byte representation.\nGet the hex representation of the Vector256 bytes.\nReturns the argument unchanged.\nBuild Vector256 from a BinaryParser.\nCalls <code>U::from(self)</code>.\nConstruct a Vector256 from a list of strings.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMax value that can be represented using one 8-bit byte …\nMax length that can be represented in 2 bytes per XRPL …\nMax value that can be represented in using two 8-bit bytes …\nMaximum length that can be encoded in a length prefix per …\nMax value that can be used in the second byte of a length …\nMax length that can be represented in a single byte per …\nReturns the field name represented by the given field ID.\nReturns the unique field ID for a given field name. This …\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrait for cryptographic algorithms in the XRP Ledger. The …\nEd25519 elliptic curve cryptography interface. SECP256K1 …\nDerive the XRP Ledger classic address for a given public …\nDerive the public and private keys from a given seed value.\nDerives a key pair for use with the XRP Ledger from a seed …\nXRPL keypair codec exceptions.\nGenerate a seed value that cryptographic keys can be …\nVerifies the signature on a given message.\nVerifies the signature on a given message.\nSign a message using a given private key.\nSigns a message using a given private key.\nMiscellaneous helper functions.\nMethods for using the ED25519 cryptographic system.\nMethods for using the ECDSA cryptographic system with the …\nDerives a key pair for use with the XRP Ledger from a seed …\nDerives a key pair for use with the XRP Ledger from a seed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVerifies the signature on a given message.\nVerifies the signature on a given message.\nSigns a message using a given private key.\nSigns a message using a given private key.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nED25519 prefix\nString keys must be _KEY_LENGTH long\nSECP256K1 prefix\nString keys must be _KEY_LENGTH long\nLength of half a sha512 hash.\nReturns the account ID for a given public key.\nReturns the first 32 bytes of SHA-512 hash of message.\nContains the error value\nA trait that implements basic functions to every model.\nRepresents the type of flags when the XRPL model has no …\nAn iterator over the variants of NoFlags\nContains the success value\nA PathStep represents an individual step along a Path.\nRepresents an amount of XRP in Drops.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCollects a models errors and returns the first error that …\nCollects a models errors and returns the first error that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the model is valid.\nChecks if the model is valid.\nConstructs a new <code>FlagCollection</code>.\nConstructs a new <code>PathStep</code>.\nConstructs a new <code>XChainBridge</code>.\nSimply forwards the error from <code>get_errors</code> if there was one.\nSimply forwards the error from <code>get_errors</code> if there was one.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe base fields for all ledger object models.\nStandard functions for ledger objects.\nA bit-map of boolean flags enabled for this account.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe object ID of a single object to retrieve from the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe type of the ledger object.\nThe object ID in transaction metadata of a single object …\nConstructs a new <code>CommonFields</code>.\nThe <code>AccountRoot</code> object type describes a single account, …\nThere are several options which can be either enabled or …\nAn iterator over the variants of AccountRootFlag\nThis account is an Automated Market Maker instance.\nEnable rippling on this addresses’s trust lines by …\nThis account can only receive funds from transactions it …\nDisallows use of the master key to sign transactions for …\nClient applications should not send XRP to this account. …\nAll assets issued by this address are frozen.\nThis address cannot freeze trust lines connected to it. …\nThe account has used its free SetRegularKey transaction.\nThis account must individually approve other users for …\nRequires incoming payments to specify a Destination Tag.\nThe identifying (classic) address of this account.\nThe identifying hash of the transaction most recently sent …\nThe account’s current XRP balance in drops, represented …\nHow many total of this account’s issued non-fungible …\nThe base fields for all ledger object models.\nA domain associated with this account. In JSON, this is …\nThe md5 hash of an email address. Clients can use this to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA public key that may be used to send encrypted messages …\nHow many total non-fungible tokens have been minted by and …\nAnother account that can mint non-fungible tokens on …\nThe number of objects this account owns in the ledger, …\nThe identifying hash of the transaction that most recently …\nThe index of the ledger that contains the transaction that …\nThe address of a key pair that can be used to sign …\nThe sequence number of the next valid transaction for this …\nHow many significant digits to use for exchange rates of …\nHow many <code>Tickets</code> this account owns in the ledger. This is …\nA transfer fee to charge other users for sending currency …\nAn arbitrary 256-bit value that users can set.\nUnused. (The code supports this field but there is no way …\nThe <code>Amendments</code> object type contains a list of <code>Amendments</code> …\n<code>&lt;https://xrpl.org/amendments-object.html#amendments-fields&gt;</code>\nThe Amendment ID of the pending amendment.\nArray of 256-bit amendment IDs for all currently enabled …\nThe <code>close_time</code> field of the ledger version where this …\nThe base fields for all ledger object models.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nArray of objects describing the status of amendments that …\nConstructs a new <code>Majority</code>.\nThe <code>AMM</code> object type describes a single Automated Market …\n<code>&lt;https://xrpl.org/amm.html#auction-slot-object&gt;</code>\nThe current owner of this auction slot.\nThe address of the special account that holds this <code>AMM&#39;s</code> …\nThe definition for one of the two assets this <code>AMM</code> holds. …\nThe definition for the other asset this <code>AMM</code> holds. In …\nDetails of the current owner of the auction slot, as an …\nA list of at most 4 additional accounts that are …\nThe base fields for all ledger object models.\nThe trading fee to be charged to the auction owner, in the …\nThe time when this slot expires, in seconds since the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe total outstanding balance of liquidity provider tokens …\nConstructs a new <code>AuthAccount</code>.\nConstructs a new <code>AuctionSlot</code>.\nConstructs a new <code>VoteEntry</code>.\nThe amount the auction owner paid to win this slot, in LP …\nThe percentage fee to be charged for trades against this …\nA list of vote objects, representing votes on the pool’s …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA Check object describes a check, similar to a paper …\nThe sender of the <code>Check</code>. Cashing the <code>Check</code> debits this …\nThe base fields for all ledger object models.\nThe intended recipient of the <code>Check</code>. Only this address can …\nA hint indicating which page of the destination’s owner …\nAn arbitrary tag to further specify the destination for …\nIndicates the time after which this <code>Check</code> is considered …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nArbitrary 256-bit hash provided by the sender as a …\nA hint indicating which page of the sender’s owner …\nThe identifying hash of the transaction that most recently …\nThe index of the ledger that contains the transaction that …\nThe maximum amount of currency this Check can debit the …\nThe sequence number of the <code>CheckCreate</code> transaction that …\nAn arbitrary tag to further specify the source for this …\nA <code>DepositPreauth</code> object tracks a preauthorization from one …\nThe account that granted the preauthorization.\nThe account that received the preauthorization.\nThe base fields for all ledger object models.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA hint indicating which page of the sender’s owner …\nThe identifying hash of the transaction that most recently …\nThe index of the ledger that contains the transaction that …\nThe <code>DirectoryNode</code> object type provides a list of links to …\nThe base fields for all ledger object models.\n(<code>Offer</code> Directories only) DEPRECATED. Do not use.\nReturns the argument unchanged.\nIf this <code>Directory</code> consists of multiple pages, this ID …\nIf this <code>Directory</code> consists of multiple pages, this ID …\nThe contents of this <code>Directory</code>: an array of IDs of other …\nCalls <code>U::from(self)</code>.\n(Owner Directories only) The address of the account that …\nThe ID of root object for this directory.\n(<code>Offer</code> <code>Directories</code> only) The currency code of the <code>TakerGets</code>…\n(<code>Offer</code> <code>Directories</code> only) The currency code of the <code>TakerPays</code>…\ndirectory.\n(<code>Offer</code> <code>Directories</code> only) The issuer of the <code>TakerPays</code> …\nThe <code>Escrow</code> object type represents a held payment of XRP …\nThe address of the owner (sender) of this held payment. …\nThe amount of XRP, in drops, to be delivered by the held …\nThe held payment can be canceled if and only if this field …\nThe base fields for all ledger object models.\nA PREIMAGE-SHA-256 crypto-condition, as hexadecimal. If …\nThe destination address where the XRP is paid if the held …\nA hint indicating which page of the destination’s owner …\nAn arbitrary tag to further specify the destination for …\nThe time, in seconds since the Ripple Epoch, after which …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA hint indicating which page of the owner directory links …\nThe identifying hash of the transaction that most recently …\nThe index of the ledger that contains the transaction that …\nAn arbitrary tag to further specify the source for this …\nThe <code>FeeSettings</code> object type contains the current base …\nThe transaction cost of the “reference transaction” in …\nThe base fields for all ledger object models.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe BaseFee translated into “fee units”.\nThe base reserve for an account in the XRP Ledger, as …\nThe incremental owner reserve for owning objects, as drops …\nThe <code>LedgerHashes</code> object type contains a history of prior …\nThe base fields for all ledger object models.\n<strong>DEPRECATED</strong> Do not use.\nReturns the argument unchanged.\nAn array of up to 256 ledger hashes. The contents depend …\nCalls <code>U::from(self)</code>.\nThe Ledger Index of the last entry in this object’s …\nEach <code>DisabledValidator</code> object represents one disabled …\nThe NegativeUNL object type contains the current status of …\nThe base fields for all ledger object models.\nA list of <code>DisabledValidator</code> objects (see below), each …\nThe ledger index when the validator was added to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>DisabledValidator</code>.\nThe master public key of the validator, in hexadecimal.\nThe public key of a trusted validator that is scheduled to …\nThe public key of a trusted validator in the Negative UNL …\nIf enabled, the <code>NFTokenOffer</code> is a sell offer. Otherwise, …\nThe <code>NFTokenOffer</code> object represents an offer to buy, sell …\nAn iterator over the variants of NFTokenOfferFlag\nAmount expected or offered for the <code>NFToken</code>. If the token …\nThe base fields for all ledger object models.\nThe <code>AccountID</code> for which this offer is intended. If …\nThe time after which the offer is no longer active. The …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>NFTokenID</code> of the <code>NFToken</code> object referenced by this …\nInternal bookkeeping, indicating the page inside the token …\nOwner of the account that is creating and owns the offer. …\nInternal bookkeeping, indicating the page inside the owner …\nIdentifying hash of the transaction that most recently …\nIndex of the ledger that contains the transaction that …\nThe <code>NFTokenPage</code> object represents a collection of <code>NFToken</code> …\nThe base fields for all ledger object models.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>NFToken</code>.\nThe locator of the next page, if any. Details about this …\nThe collection of NFToken objects contained in this …\nThe locator of the previous page, if any. Details about …\nIdentifies the transaction ID of the transaction that most …\nThe sequence of the ledger that contains the transaction …\nThe object was placed as a passive Offer.\nThe object was placed as a sell Offer.\nThe Offer ledger entry describes an Offer to exchange …\nAn iterator over the variants of OfferFlag\nThe address of the account that owns this <code>Offer</code>.\nThe ID of the <code>Offer Directory</code> that links to this Offer.\nA hint indicating which page of the offer directory links …\nThe base fields for all ledger object models.\nIndicates the time after which this Offer is considered …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA hint indicating which page of the owner directory links …\nThe identifying hash of the transaction that most recently …\nThe index of the ledger that contains the transaction that …\nThe <code>Sequence</code> value of the <code>OfferCreate</code> transaction that …\nThe remaining amount and type of currency being provided …\nThe remaining amount and type of currency requested by the …\nThe <code>PayChannel</code> object type represents a payment channel. …\nThe source address that owns this payment channel.\nTotal XRP, in drops, that has been allocated to this …\nTotal XRP, in drops, already paid out by the channel. The …\nThe immutable expiration time for this payment channel, in …\nThe base fields for all ledger object models.\nThe destination address for this payment channel. While …\nA hint indicating which page of the destination’s owner …\nAn arbitrary tag to further specify the destination for …\nThe mutable expiration time for this payment channel, in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA hint indicating which page of the source address’s …\nThe identifying hash of the transaction that most recently …\nThe index of the ledger that contains the transaction that …\nPublic key, in hexadecimal, of the key pair that can be …\nNumber of seconds the source address must wait to close …\nAn arbitrary tag to further specify the source for this …\nThe high account has authorized the low account to hold …\nThe high account has frozen the trust line, preventing the …\nThe high account has disabled rippling from this trust …\nThis RippleState object contributes to the high account’…\nThe low account has authorized the high account to hold …\nThe low account has frozen the trust line, preventing the …\nThe low account has disabled rippling from this trust line.\nThis RippleState object contributes to the low account’s …\nThe RippleState object type connects two accounts in a …\nAn iterator over the variants of RippleStateFlag\nThe balance of the trust line, from the perspective of the …\nThe base fields for all ledger object models.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe limit that the high account has set on the trust line. …\n(Omitted in some historical ledgers) A hint indicating …\nThe inbound quality set by the high account, as an integer …\nThe outbound quality set by the high account, as an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe limit that the low account has set on the trust line. …\nOmitted in some historical ledgers) A hint indicating …\nThe inbound quality set by the low account, as an integer …\nThe outbound quality set by the low account, as an integer …\nThe identifying hash of the transaction that most recently …\nThe index of the ledger that contains the transaction that …\nIf this flag is enabled, this SignerList counts as one …\nEach member of the SignerEntries field is an object that …\nThe SignerList object type represents a list of parties …\nAn iterator over the variants of SignerListFlag\nAn XRP Ledger address whose signature contributes to the …\nThe base fields for all ledger object models.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>SignerEntry</code>.\nA hint indicating which page of the owner directory links …\nThe identifying hash of the transaction that most recently …\nThe index of the ledger that contains the transaction that …\nAn array of Signer Entry objects representing the parties …\nAn ID for this signer list. Currently always set to 0.\nA target number for signer weights. To produce a valid …\nThe weight of a signature from this signer.\nArbitrary hexadecimal data. This can be used to identify …\nThe <code>Ticket</code> object type represents a <code>Ticket</code>, which tracks …\nThe account that owns this Ticket.\nThe base fields for all ledger object models.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA hint indicating which page of the owner directory links …\nThe identifying hash of the transaction that most recently …\nThe index of the ledger that contains the transaction that …\nThe Sequence Number this Ticket sets aside.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe base fields for all request models.\nThe base trait for all request models. Used to identify …\nRepresents the different options for the <code>method</code> field in a …\nThe request method.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe unique request id.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA 20-byte hex string for the ledger version to use.\nThe ledger index of the ledger to use, or a shortcut …\nConstructs a new <code>CommonFields</code>.\nConstructs a new <code>LookupByLedgerRequest</code>.\nThis request returns information about an account’s …\nThe unique identifier of an account, typically the account…\nCommon fields shared by all requests.\nThe unique identifier of an account, typically the account…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe unique identifier of a ledger.\nLimit the number of transactions to retrieve. Cannot be …\nValue from a previous paginated response. Resume …\nThis request retrieves a list of currencies that an account\nA unique identifier for the account, most commonly the …\nThe common fields shared by all requests.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe unique identifier of a ledger.\nIf true, then the account field only accepts a public key …\nThis request retrieves information about an account, its …\nA unique identifier for the account, most commonly the …\nThe common fields shared by all requests.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe unique identifier of a ledger.\nIf true, and the FeeEscalation amendment is enabled, also …\nIf true, and the MultiSign amendment is enabled, also …\nIf true, then the account field only accepts a public key …\nThis request returns information about an account’s trust\nA unique identifier for the account, most commonly the …\nThe common fields shared by all requests.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe unique identifier of a ledger.\nLimit the number of trust lines to retrieve. The server is …\nThe Address of a second account. If provided, show only …\nThis method retrieves all of the NFTs currently owned by …\nThe unique identifier of an account, typically the account…\nThe common fields shared by all requests.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimit the number of token pages to retrieve. Each page can …\nValue from a previous paginated response. Resume …\nRepresents the object types that an AccountObjects Request …\nThis request returns the raw ledger format for all objects …\nA unique identifier for the account, most commonly the …\nThe common fields shared by all requests.\nIf true, the response only includes objects that would …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe unique identifier of a ledger.\nThe maximum number of objects to include in the results. …\nValue from a previous paginated response. Resume retrieving\nIf included, filter results to include only this type of …\nThis request retrieves a list of offers made by a given …\nA unique identifier for the account, most commonly the …\nThe common fields shared by all requests.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe unique identifier of a ledger.\nLimit the number of transactions to retrieve. The server is\nValue from a previous paginated response. Resume retrieving\nIf true, then the account field only accepts a public key …\nThis request retrieves from the ledger a list of …\nA unique identifier for the account, most commonly the …\nDefaults to false. If set to true, returns transactions as …\nThe common fields shared by all requests.\nDefaults to false. If set to true, returns values indexed …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUse to specify the most recent ledger to include …\nUse to specify the earliest ledger to include transactions …\nThe unique identifier of a ledger.\nDefault varies. Limit the number of transactions to …\nValue from a previous paginated response. Resume retrieving\nThe common fields shared by all requests.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe book_offers method retrieves a list of offers, also …\nThe common fields shared by all requests.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe unique identifier of a ledger.\nIf provided, the server does not provide more than this …\nThe Address of an account to use as a perspective. …\nSpecification of which currency the account taking the …\nSpecification of which currency the account taking the …\nThe channel_authorize method creates a signature that can  …\nCumulative amount of XRP, in drops, to authorize. If the …\nThe unique ID of the payment channel to use.\nThe common fields shared by all requests.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe signing algorithm of the cryptographic key pair …\nA string passphrase to use to sign the claim. This must be …\nThe secret key to use to sign the claim. This must be the …\nThe secret seed to use to sign the claim. This must be the …\nThe secret seed to use to sign the claim. This must be the …\nThe channel_verify method checks the validity of a …\nThe amount of XRP, in drops, the provided signature …\nThe Channel ID of the channel that provides the XRP. This …\nThe common fields shared by all requests.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe public key of the channel and the key pair that was …\nThe signature to verify, in hexadecimal.\nThe deposit_authorized command indicates whether one …\nThe common fields shared by all requests.\nThe recipient of a possible payment.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe unique identifier of a ledger.\nThe sender of a possible payment.\nThe fee command reports the current state of the …\nThe common fields shared by all requests.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis request calculates the total balances issued by a …\nThe Address to check. This should be the issuing address.\nThe common fields shared by all requests.\nReturns the argument unchanged.\nAn operational address to exclude from the balances …\nCalls <code>U::from(self)</code>.\nThe unique identifier of a ledger.\nIf true, only accept an address or public key for the …\nRetrieve information about the public ledger.\nAdmin required. If true, return information on accounts in …\nIf true, and transactions and expand are both also true, …\nThe common fields shared by all requests.\nProvide full JSON-formatted information for …\nReturns the argument unchanged.\nAdmin required. If true, return full information on the …\nCalls <code>U::from(self)</code>.\nA 20-byte hex string for the ledger version to use.\nThe ledger index of the ledger to use, or a shortcut …\nIf true, include owner_funds field in the metadata of …\nIf true, and the command is requesting the current ledger, …\nIf true, return information on transactions in the …\nThe ledger_closed method returns the unique identifiers of …\nThe common fields shared by all requests.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe ledger_closed method returns the unique identifiers of …\nThe common fields shared by all requests.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe ledger_data method retrieves contents of the specified …\nIf set to true, return ledger objects as hashed hex …\nThe common fields shared by all requests.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe unique identifier of a ledger.\nLimit the number of ledger objects to retrieve. The server …\nValue from a previous paginated response. Resume …\nRequired fields for requesting a DepositPreauth if not …\nRequired fields for requesting a DirectoryNode if not …\nRequired fields for requesting a Escrow if not querying by …\nThe ledger_entry method returns a single ledger object …\nRequired fields for requesting a Escrow if not querying by …\nRequired fields for requesting a RippleState.\nRequired fields for requesting a Ticket, if not querying …\nIf true, return the requested ledger object’s contents …\nThe common fields shared by all requests.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe unique identifier of a ledger.\nConstructs a new <code>DepositPreauth</code>.\nConstructs a new <code>Directory</code>.\nConstructs a new <code>Escrow</code>.\nConstructs a new <code>Offer</code>.\nConstructs a new <code>Ticket</code>.\nConstructs a new <code>RippleState</code>.\nThe manifest method reports the current “manifest” …\nThe common fields shared by all requests.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe base58-encoded public key of the validator to look up. …\nThis method retrieves all of buy offers for the specified …\nThe common fields shared by all requests.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe unique identifier of a ledger.\nLimit the number of NFT buy offers to retrieve. This value …\nValue from a previous paginated response. Resume …\nThe unique identifier of a NFToken object.\nThe <code>nft_history</code> method retreives a list of transactions …\nThe common fields shared by all requests.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe unique identifier of a ledger.\nThe unique identifier of an NFToken. The request returns …\nThe <code>nft_info</code> method retrieves all the information about the\nThe common fields shared by all requests.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe unique identifier of a ledger.\nThe unique identifier of an NFToken. The request returns …\nThis method retrieves all of sell offers for the specified …\nThe common fields shared by all requests.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe unique identifier of a NFToken object.\nThe <code>nfts_by_issuer</code> method retrieves all of the NFTokens …\nThe common fields shared by all requests.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe unique identifier for an account that issues NFTokens …\nThe unique identifier of a ledger.\nThis request provides a quick way to check the status of …\nEnum representing the options for the address role in a …\nA unique identifier for the account, most commonly the …\nThe common fields shared by all requests.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe unique identifier of a ledger.\nThe maximum number of trust line problems to include in the\nWhether the address refers to a gateway or user. …\nIf true, include an array of suggested transactions, as …\nA path is an array. Each member of a path is an object …\nWebSocket API only! The path_find method searches for a …\nThere are three different modes, or sub-commands, of the …\nThe common fields shared by all requests.\nUnique address of the account to find a path to. (In other …\nCurrency Amount that the destination account would receive …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nArray of arrays of objects, representing payment paths to …\nCurrency Amount that would be spent in the transaction. …\nUnique address of the account to find a path from. (In …\nUse “create” to send the create sub-command.\nThe ping command returns an acknowledgement, so that …\nThe common fields shared by all requests.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe random command provides a random number to be used as …\nThe common fields shared by all requests.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe ripple_path_find method is a simpl&lt;’a&gt;ified version …\nThe common fields shared by all requests.\nUnique address of the account that would receive funds in …\nCurrency Amount that the destination account would receive …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe unique identifier of a ledger.\nCurrency Amount that would be spent in the transaction. …\nUnique address of the account that would send funds in a …\nArray of currencies that the source account might want to …\nThe server_info command asks the server for a …\nThe common fields shared by all requests.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe server_state command asks the server for various …\nThe common fields shared by all requests.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe submit method applies a transaction and sends it to …\nThe common fields shared by all requests.\nIf true, and the transaction fails locally, do not retry …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHex representation of the signed transaction to submit. …\nThe server_state command asks the server for various …\nThe common fields shared by all requests.\nIf true, and the transaction fails locally, do not retry …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents possible values of the streams query param for …\nThe subscribe method requests periodic notifications from …\nFormat for elements in the <code>books</code> array for Subscribe only.\nArray with the unique addresses of accounts to monitor for …\nLike accounts, but include transactions that are not yet …\nArray of objects defining order books  to monitor for …\nThe common fields shared by all requests.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>SubscribeBook</code>.\nArray of string names of generic streams to subscribe to.\n(Optional for Websocket; Required otherwise) URL where the …\nPassword to provide for basic authentication at the …\nUsername to provide for basic authentication at the …\nThe transaction_entry method retrieves information on a …\nThe common fields shared by all requests.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe unique identifier of a ledger.\nUnique hash of the transaction you are looking up.\nThe tx method retrieves information on a single …\nIf true, return transaction data and metadata as binary …\nThe common fields shared by all requests.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUse this with min_ledger to specify a range of up to 1000 …\nUse this with max_ledger to specify a range of up to 1000 …\nThe 256-bit hash of the transaction to look up, as …\nThe unsubscribe command tells the server to stop sending …\nFormat for elements in the <code>books</code> array for Unsubscribe …\nArray of unique account addresses to stop receiving updates\nLike accounts, but for accounts_proposed subscriptions that\nArray of objects defining order books to unsubscribe from, …\nThe common fields shared by all requests.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>UnsubscribeBook</code>.\nArray of string names of generic streams to unsubscribe …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResponse from an account_channels request, containing …\nRepresents a single payment channel object in the XRP …\nThe address of the source/owner of the payment channels.\nThe owner of the channel, as an Address.\nThe total amount of XRP, in drops allocated to this …\nThe total amount of XRP, in drops, paid out from this …\nTime, in seconds since the Ripple Epoch, of this channel’…\nA unique ID for this channel, as a 64-character …\nPayment channels owned by this account.\nThe destination account of the channel, as an Address.\nA 32-bit unsigned integer to use as a destination tag for …\nTime, in seconds since the Ripple Epoch, when this channel …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe identifying Hash of the ledger version used to …\nThe Ledger Index of the ledger version used to generate …\nThe limit to how many channel objects were actually …\nServer-defined value for pagination. Pass this to the next …\nThe public key for the payment channel in the XRP Ledger’…\nThe public key for the payment channel in hexadecimal …\nThe number of seconds the payment channel must stay open …\nA 32-bit unsigned integer to use as a source tag for …\nIf true, the information comes from a validated ledger …\nResponse from an account_currencies request, containing a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe identifying hash of the ledger version used to …\nThe ledger index of the ledger version used to retrieve …\nArray of Currency Codes for currencies that this account …\nArray of Currency Codes for currencies that this account …\nIf true, this data comes from a validated ledger.\nAccount flags status information\nResponse from an account_info request, containing …\nQueue data for pending transactions\nInformation about a queued transaction\nThe AccountRoot ledger object with this account’s …\nThe account’s flag statuses (see below), based on the …\nIf true, allows trust line clawback\nWhether this transaction changes this address’s ways of …\nWhether a transaction in the queue changes this address’…\nIf true, the account allows rippling on its trust lines by …\nIf true, the account is using Deposit Authorization and …\nIf true, the account’s master key pair is disabled.\nIf true, the account does not allow others to send Checks …\nIf true, the account does not allow others to make NFT buy …\nIf true, the account does not allow others to make Payment …\nIf true, the account does not allow others to make trust …\nIf true, the account does not want to receive XRP from …\nThe Transaction Cost of this transaction, in drops of XRP.\nThe transaction cost of this transaction, relative to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf true, all tokens issued by the account are currently …\nThe highest Sequence Number among transactions queued by …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n(Omitted if <code>ledger_index</code> is provided instead) The ledger …\n(Omitted if <code>ledger_current_index</code> is provided instead) The …\nThe lowest Sequence Number among transactions queued by …\nThe maximum amount of XRP, in drops, this transaction …\nInteger amount of drops of XRP that could be debited from …\nIf true, the account has permanently given up the …\nIf false, the account can send a special key reset …\n(Omitted unless queue specified as true and querying the …\nIf true, the account is using Authorized Trust Lines to …\nIf true, the account requires a destination tag on all …\nThe Sequence Number of this transaction.\nIf requested, array of SignerList ledger objects …\nIf requested, array of SignerList ledger objects …\nInformation about each queued transaction from this …\nNumber of queued transactions from this address.\nTrue if this data is from a validated ledger version; if …\nResponse from an account_lines request, containing …\nRepresents a single trust line object.\nUnique Address of the account this request corresponds to. …\nThe unique Address of the counterparty to this trust line.\n(May be omitted) If true, this account has authorized this …\nRepresentation of the numeric balance currently held …\nA Currency Code identifying what currency this trust line …\n(May be omitted) If true, this account has frozen this …\n(May be omitted) If true, the peer account has frozen this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n(Omitted if ledger_hash or ledger_index provided) The …\n(May be omitted) The identifying hash the ledger version …\n(Omitted if ledger_current_index provided instead) The …\nThe maximum amount of the given currency that this account …\nThe maximum amount of currency that the counterparty …\nArray of trust line objects. If the number of trust lines …\nServer-defined value indicating the response is paginated. …\n(May be omitted) If true, this account has enabled the No …\n(May be omitted) If true, the peer account has enabled the …\n(May be omitted) If true, the peer account has authorized …\nRate at which the account values incoming balances on this …\nRate at which the account values outgoing balances on this …\nResponse from an account_nfts request, containing a list …\nEach object in the account_nfts array represents one …\nThe account that owns the list of NFTs.\nA bit-map of boolean flags enabled for this NFToken. See …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe account that issued this NFToken.\n(May be omitted) The ledger index of the current …\n(May be omitted) The identifying hash of the ledger that …\n(May be omitted) The ledger index of the ledger that was …\nThe limit, as specified in the request.\n(May be omitted) Server-defined value indicating the …\nThe unique identifier of this NFToken, in hexadecimal.\nThe token sequence number of this NFToken, which is unique …\nA list of NFTs owned by the account, formatted as NFT …\nThe unscrambled version of this token’s taxon. Several …\nThe URI data associated with this NFToken, in hexadecimal.\nIf included and set to true, the information in this …\nResponse format for the account_objects method, which …\nUnique Address of the account this request corresponds to\nArray of objects owned by this account. Each object is in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe ledger index of the current in-progress ledger …\nThe identifying hash of the ledger that was used to …\nThe ledger index of the ledger version that was used to …\nThe limit that was used in this request, if any.\nServer-defined value indicating the response is paginated. …\nIf true, the information in this response comes from a …\nResponse from an account_offers request, containing a list …\nRepresents a single offer object in the account_offers …\nUnique Address identifying the account that made the offers\nA time after which this offer is considered unfunded, as …\nOptions set for this offer entry as bit-flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ledger index of the current in-progress ledger …\nThe identifying hash of the ledger version that was used …\nThe ledger index of the ledger version that was used when …\nServer-defined value indicating the response is paginated. …\nArray of objects, where each object represents an offer …\nThe exchange rate of the offer, as the ratio of the …\nSequence number of the transaction that created this entry.\nThe amount the account accepting the offer receives, as a …\nThe amount the account accepting the offer provides, as a …\nResponse from an account_tx request, containing …\nUnique Address identifying the related account\nThe ledger close time represented in ISO 8601 time format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe unique hash identifier of the transaction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA hex string of the ledger version that included this …\nThe ledger index of the ledger version that included this …\nThe ledger index of the most recent ledger actually …\nThe ledger index of the earliest ledger actually searched …\nThe limit value used in the request. (This may differ from …\nServer-defined value indicating the response is paginated. …\n(JSON mode) The transaction results metadata in JSON.\nIf binary is true, then this is a hex string of the …\n(Binary mode) The transaction results metadata as a hex …\nArray of transactions matching the request’s criteria, …\n(Binary mode) A hex string of the transaction in binary …\n(Binary mode) A unique hex string defining the transaction.\n(JSON mode) JSON object defining the transaction.\nIf included and set to true, the information in this …\nWhether or not the transaction is included in a validated …\nDescribes the current status of an Automated Market Maker …\nResponse format for the amm_info method, which returns …\nDescribes the current auction slot holder of the AMM.\nRepresents an authorized account for discounted trading.\nRepresents one liquidity provider’s vote to set the …\nThe Address of the AMM Account.\nThe Address of the account that owns the auction slot.\nThe address of the designated account.\nThe Address of this liquidity provider.\nThe AMM Description Object for the requested asset pair.\nThe total amount of one asset in the AMM’s pool.\nThe total amount of the other asset in the AMM’s pool.\nIf true, the amount2 currency is currently frozen. Omitted …\nIf true, the amount currency is currently frozen. Omitted …\nDetails about the current auction slot holder, if there is …\nAdditional accounts eligible for the discounted trading …\nThe discounted trading fee (1/10 of the AMM’s normal …\nThe ISO 8601 UTC timestamp when this auction slot expires.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ledger index of the current in-progress ledger. …\nThe identifying hash of the ledger version used. Omitted …\nThe ledger index of the ledger version used. Omitted if …\nThe total amount of this AMM’s LP Tokens outstanding. If …\nThe amount in LP Tokens paid to win the auction slot.\nCurrent 72-minute time interval (0-19).\nThe AMM’s current trading fee, in units of 1/100,000.\nThe trading fee voted for, in units of 1/100,000.\nIf true, the ledger is validated and results are final.\nThe current votes for the AMM’s trading fee.\nThe vote weight, proportional to LP Token holdings.\nRepresents an offer in the order book, with additional …\nResponse format for the book_offers method, which …\nThe account that placed this offer.\nThe ID of the Offer Directory that links to this offer.\nA hint indicating which page of the Offer Directory links …\nTime after which this offer is considered expired.\nBit-map of boolean flags enabled for this offer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe unique ID of this offer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ledger index of the current in-progress ledger …\nThe identifying hash of the ledger version that was used …\nThe ledger index of the ledger version that was used when …\nArray of offer objects, each of which has the fields of an …\nAmount of the TakerGets currency the side placing the …\nThe exchange rate, as the ratio taker_pays divided by …\nThe amount and type of currency being sold.\nThe maximum amount of currency that the taker can get, …\nThe amount and type of currency being bought.\nThe maximum amount of currency that the taker would pay, …\nResponse format for the channel_authorize method, which …\nThe credentials specified in the request, if any.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe signature for this claim, as a hexadecimal value. To …\nResponse format for the channel_verify method, which …\nThe credentials specified in the request, if any.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe ledger index of the current in-progress ledger version.\nThe identifying hash of the ledger that was used to …\nThe ledger index of the ledger version that was used to …\nWhether the signature is valid for the stated amount, …\nIf true, the information comes from a validated ledger …\nResponse format for the deposit_authorized method, which …\nThe credentials specified in the request, if any.\nWhether the specified source account is authorized to send …\nThe destination account specified in the request.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe ledger index of the current in-progress ledger …\nThe identifying hash of the ledger that was used to …\nThe ledger index of the ledger version that was used to …\nThe source account specified in the request.\nIf true, the information comes from a validated ledger …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInformation about transaction costs in drops of XRP\nResponse format for the fee method, which reports the …\nInformation about transaction costs in fee levels\nThe transaction cost required for a reference transaction …\nNumber of transactions provisionally included in the …\nNumber of transactions currently queued for the next …\nVarious information about the transaction cost (the Fee …\nThe approximate number of transactions expected to be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe Ledger Index of the current open ledger these stats …\nVarious information about the transaction cost, in fee …\nThe maximum number of transactions that the transaction …\nAn approximation of the median transaction cost among …\nThe median transaction cost among transactions in the …\nThe minimum transaction cost for a reference transaction …\nThe minimum transaction cost required to be queued for a …\nThe minimum transaction cost that a reference transaction …\nThe minimum transaction cost required to be included in …\nThe equivalent of the minimum transaction cost, …\nRepresents a balance for a specific currency in the assets …\nResponse format for the gateway_balances method, which …\nThe address of the account that issued the balances.\n(Omitted if empty) Total amounts held that are issued by …\n(Omitted if empty) Amounts issued to the hotwallet …\nThe currency code of the balance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n(Omitted if ledger_current_index is provided) The ledger …\n(May be omitted) The identifying hash of the ledger …\n(May be omitted) The ledger index of the ledger version …\n(Omitted if empty) Total amounts issued to addresses not …\nThe amount of the currency.\nResponse from a ledger request, containing information …\nThe complete ledger header data.\nRepresents a queued transaction in the ledger.\nTransaction information that can be either a hash string …\nExpanded transaction object when requested in JSON format.\nThe Address of the sender for this queued transaction.\nHash of all account state information in this ledger, as …\nWhether this transaction changes this address’s ways of …\nA bit-map of flags relating to the closing of this ledger.\nThe time this ledger was closed, in seconds since the …\nThe time this ledger was closed, in human-readable format. …\nLedger close times are rounded to within this many seconds.\nWhether or not this ledger has been closed.\nThe Transaction Cost of this transaction, in drops of XRP.\nThe transaction cost relative to the minimum cost, in fee …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe identifying hash of the transaction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf this transaction was left in queue after getting a …\nThe complete ledger header data of this ledger.\nThe unique identifying hash of the entire ledger, as …\nUnique identifying hash of the entire ledger.\nThe Ledger Index of this ledger.\nThe Ledger Index of this ledger.\nThe maximum amount of XRP, in drops, this transaction …\nThe time at which the previous ledger was closed.\nThe unique identifying hash of the previous ledger, as …\nThe tentative result from preliminary transaction checking.\nArray of objects describing queued transactions, in the …\nHow many times this transaction can be retried before …\nTotal number of XRP drops in the network, as a quoted …\nHash of the transaction information included in this …\nTransactions applied in this ledger version.\nTransaction information, either as hash string or expanded …\nIf true, this is a validated ledger version. If omitted or …\nResponse format for the ledger_closed method, which …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe unique Hash of this ledger version, in hexadecimal.\nThe ledger index of this ledger version.\nResponse format for the ledger_current method, which …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe ledger index of this ledger version. Note: A …\nResponse format for the ledger_data method, which …\nRepresents a single object in the ledger’s state tree.\nAdditional fields describing this object, depending on …\n(Only included if binary true) Hex representation of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique identifier for this ledger entry, as hex.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n(Only included if binary false) String indicating what …\nUnique identifying hash of this ledger version.\nThe ledger index of this ledger version.\nServer-defined value indicating the response is paginated. …\nArray of JSON objects containing data from the ledger’s …\nResponse format for the ledger_entry method, which returns …\nRepresents an AccountRoot ledger object in the XRP Ledger. …\nThe identifying address of this account\nThe identifying hash of the transaction that most recently …\nThe account’s current XRP balance in drops\n(Clio server only) The ledger index where the ledger entry …\nThe domain associated with this account. The raw domain …\nHash of an email address to be used for generating an …\nVarious boolean flags enabled for this account\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe unique ID of this ledger entry\nThe unique ID of this ledger entry.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe type of ledger object. For AccountRoot objects, this …\nThe identifying hash of the ledger version used to …\nThe ledger index of the ledger that was used when …\nPublic key for sending encrypted messages to this account\nObject containing the data of this ledger entry, according …\nThe binary representation of the ledger object, as …\nNumber of objects this account owns in the ledger, which …\nIdentifying hash of the previous transaction that modified …\nLedger index of the ledger containing the previous …\nThe identifying address of a key pair that can be used to …\nThe sequence number of the next valid transaction for this …\nThe rate to charge when users transfer this account’s …\nWhether this data is from a validated ledger version\nResponse from a manifest request, containing validator …\nDetails object containing the parsed contents of a …\nThe data contained in this manifest. Omitted if the server …\nThe domain name this validator claims to be associated …\nThe ephemeral public key for this validator, in base58.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe full manifest data in base64 format. This data is …\nThe master public key for this validator, in base58.\nThe public_key from the request.\nThe sequence number of this manifest. This number …\nSee Metadata: …\nArray of objects describing changes to ledger entries this …\nThe node in the directory chain.\nThe currency amount actually delivered to the destination …\nThe exchange rate, used in offer directory nodes.\nThe content fields of the ledger entry after changes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe type of ledger object this node represents.\nThe ID of this ledger entry in the ledger’s state tree.\n(Optional) MPTokenIssuanceID for MPTokenIssuanceCreate …\nThe content fields of a newly created ledger entry.\n(Optional) NFTokenID for NFTokenMint and NFTokenAcceptOffer\n(Optional) Array of NFTokenIDs for NFTokenCancelOffer …\n(Optional) OfferID for NFTokenCreateOffer transactions.\nThe node in the owner directory chain.\nThe previous values for changed fields.\nThe identifying hash of the previous transaction to modify …\nThe Ledger Index of the ledger containing the previous …\nThe root index of the directory.\nThe transaction’s position within the ledger that …\nThe transaction’s result code.\nResponse from an nft_buy_offers request, containing a list …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe limit, as specified in the request.\nServer-defined value indicating the response is paginated. …\nThe NFToken these offers are for, as specified in the …\nA list of buy offers for the token.\nSee NFT Info: <code>&lt;https://xrpl.org/nft-info.html&gt;</code>\nBit-map of boolean flags enabled for this NFToken\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this NFToken has been burned\nThe account that issued this NFToken\nThe ledger index of the ledger that was current when this …\nThe unique identifier of the NFToken\nThe serial number of this NFToken within its taxon\nThe taxon associated with this NFToken\nThe account that currently owns this NFToken\nThe transfer fee associated with this NFToken, in units of …\nThe URI data associated with this NFToken\nWhether this data is from a validated ledger version\nRepresents a single buy offer for an NFToken.\nThe amount offered to buy the NFToken.\nIf present, this offer can only be accepted by this …\nThe time after which this offer is no longer valid, in …\nBit-map of boolean flags enabled for this offer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe unique identifier of this offer in the ledger.\nThe account that placed this offer.\nResponse from an nft_sell_offers request, containing a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe limit, as specified in the request.\nServer-defined value indicating the response is paginated. …\nThe NFToken these offers are for, as specified in the …\nA list of sell offers for the token.\nResult type for NFTokenAcceptOffer transaction\nResult type for NFTokenCancelOffer transaction\nResult type for NFTokenCreateOffer transaction\nResult type for NFTokenMint transaction\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe complete transaction metadata\nThe complete transaction metadata\nThe complete transaction metadata\nThe complete transaction metadata\nThe NFTokenID of the minted token\nThe NFTokenID of the accepted token\nThe NFTokenIDs of all tokens affected by the cancellation\nThe OfferID of the created offer\nResponse from a noripple_check request, which identifies …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe ledger index of the ledger used to calculate these …\nArray of human-readable strings describing the problems. …\nIf the request specified transactions as true, this …\nWhether this response contains validated ledger …\nRepresents a path from one possible source currency (held …\nResponse from a path_find request, containing possible …\nA PathStep represents an individual step along a Path.\nArray of objects with suggested paths to take. If empty, …\nUnique address of the account that would receive a …\nCurrency Amount that the destination would receive in a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf false, this is the result of an incomplete search. A …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nArray of arrays of objects defining payment paths.\nUnique address that would send a transaction.\nCurrency Amount that the source would have to send along …\nSee Ping: <code>&lt;https://xrpl.org/ping.html#ping&gt;</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nResponse format for the random command, which provides a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA random 256-bit value represented as a hexadecimal string.\nRepresents a path from one possible source currency (held …\nResponse from a ripple_path_find request, containing …\nArray of objects with possible paths to take. If empty, …\nUnique address of the account that would receive a payment …\nArray of currencies that the destination accepts, as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n@deprecated Array of arrays of objects defining canonical …\nArray of arrays of objects defining payment paths.\n@deprecated Array of arrays of objects defining expanded …\nCurrency Amount that the source would have to send along …\nServer information\nResponse format for the server_info command, which returns …\nTime since ledger close in seconds\nIf true, this server is amendment blocked\nBase fee in XRP (Not drops for some reason?)\nThe version number of the running rippled server\nInformation about the most recently closed ledger that has …\nRange expression indicating the sequence numbers of the …\nTime to reach consensus in seconds\nPerformance metrics for RPC calls and JobQueue\nItems currently being run in the job queue\nList of P2P-mode servers\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique ledger hash\nServer hostname or RFC-1751 word based on node public key\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAmount of time spent waiting for I/O operations, in …\nWhether server is writing to external database\nInformation about job types and time spent\nNumber of times server had over 250 transactions waiting\nInformation about the last ledger close\nLast publish time\nDetailed information about the current load state\nCurrent transaction cost multiplier\nTransaction cost multiplier from cluster load\nTransaction cost multiplier for open ledger\nTransaction cost multiplier for queue\nTransaction cost multiplier based on local load\nTransaction cost multiplier from network load\nTransaction cost multiplier excluding open ledger\nNumber of connected peer servers\nList of ports listening for API commands\nNumber of trusted validators considered\nPublic key for peer-to-peer communications\nPublic key for ledger validations\nReporting mode configuration information\nMinimum XRP reserve for accounts (Not drops for some …\nAdditional XRP reserve per owned object (Not drops for …\nLedger sequence number\nCurrent server state\nMicroseconds in current state\nServer state accounting information\nNumber of threads in main job pool\nCurrent UTC time according to server\nSeconds server has been operational\nInformation about the most recent validated ledger\nMinimum required trusted validations\nValidator list information\nValidator list expiration time\nPort configuration information\nResponse format for the server_state command, which …\nServer state response data\nInformation about a validated ledger\nIf true, this server is amendment blocked\nBase fee in drops of XRP for transaction propagation\nThe version number of the running rippled version\nTime this ledger was closed (seconds since Ripple Epoch)\nInformation on the most recently closed ledger that has …\nRange expression indicating the sequence numbers of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique hash of this ledger version\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAmount of time spent waiting for I/O operations, in …\nNumber of times server had over 250 transactions waiting …\nInformation about the last time the server closed a ledger\nBaseline amount of server load used in transaction cost …\nCurrent load factor the server is enforcing\nCurrent multiplier to the transaction cost to get into the …\nCurrent multiplier to the transaction cost to get into the …\nTransaction cost with no load scaling\nLoad factor based on load to server, cluster, and network\nCount of peer disconnections\nCount of resource-related peer disconnections\nNumber of other rippled servers currently connected\nPort number where the server is listening\nList of ports where the server is listening for API …\nList of protocols being served on this port\nPublic key used for peer-to-peer communications\nMinimum account reserve\nOwner reserve for each owned item\nLedger index of this version\nCurrent server state (e.g., “full”, “validating”, …\nConsecutive microseconds in current state\nInformation about time spent in various server states\nCurrent UTC time according to server\nNumber of consecutive seconds server has been operational\nInformation about the most recent fully-validated ledger\nMinimum number of trusted validations required\nResponse format for the submit method, which applies a …\n(Omitted in sign-and-submit mode) The value true indicates …\n(Omitted in sign-and-submit mode) The next Sequence Number …\n(Omitted in sign-and-submit mode) The next Sequence Number …\n(Omitted in sign-and-submit mode) The value true indicates …\n(Omitted in sign-and-submit mode) The value true indicates …\nText result code indicating the preliminary result of the …\nNumeric version of the result code. Not recommended.\nHuman-readable explanation of the transaction’s …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n(Omitted in sign-and-submit mode) The value true indicates …\n(Omitted in sign-and-submit mode) The current open ledger …\n(Omitted in sign-and-submit mode) The value true indicates …\nThe complete transaction in hex string format\nThe complete transaction in JSON format\n(Omitted in sign-and-submit mode) The ledger index of the …\nResponse format for the submit_multisigned method, which …\nCode indicating the preliminary result of the transaction, …\nNumeric code indicating the preliminary result of the …\nHuman-readable explanation of the preliminary transaction …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe complete transaction in hex string format\nThe complete transaction in JSON format\nSee Subscribe: <code>&lt;https://xrpl.org/subscribe.html#subscribe&gt;</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nResponse format for the transaction_entry method.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe identifying hash of the ledger version the transaction …\nThe ledger index of the ledger version the transaction was …\nThe transaction metadata, which shows the exact results of …\nJSON representation of the Transaction object.\nRepresents various response transaction types.\nThe transaction’s compact transaction identifier.\nThe close time of the ledger in which the transaction was …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe unique identifying hash of the transaction\n(Deprecated) Alias for <code>ledger_index</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ledger index of the ledger that includes this …\n(JSON mode) Transaction metadata, which describes the …\nTransaction metadata, which describes the results of the …\n(Binary mode) Transaction metadata, which describes the …\nThe transaction data represented as a hex string.\n(Binary mode) The transaction data represented as a hex …\nThe transaction data represented in JSON.\nOther fields from the <code>Transaction</code> object\nIf true, this data comes from a validated ledger version; …\nSee Unsubscribe: <code>&lt;https://xrpl.org/unsubscribe.html&gt;</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents one entry in a list of AuthAccounts used in …\nThe base fields for all transaction models.\nAn arbitrary piece of data attached to a transaction. A …\nOne Signer in a multi-signature. A multi-signed transaction\nStandard functions for transactions.\nEnum containing the different Transaction types.\nThe unique address of the account that initiated the …\nHash value identifying another transaction. If provided, …\nInteger amount of XRP, in drops, to be destroyed as a cost …\nSet of bit-flags for this transaction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHashes the Transaction object as the ledger does. Only …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHighest ledger index this transaction can appear in. …\nAdditional arbitrary information used to identify this …\nThe network ID of the chain this transaction is intended …\nConstructs a new <code>PreparedTransaction</code>.\nConstructs a new <code>SignedTransaction</code>.\nConstructs a new <code>Memo</code>.\nConstructs a new <code>AuthAccount</code>.\nConstructs a new <code>Signer</code>.\nThe sequence number of the account sending the transaction.\nArbitrary integer used to identify the reason for this …\nHex representation of the public key that corresponds to …\nHex representation of the public key that corresponds to …\nArbitrary integer used to identify the reason for this …\nThe sequence number of the ticket to use in place of a …\nThe type of transaction.\nThe signature that verifies this transaction as originating\nThe signature that verifies this transaction as originating\nAn AccountDelete transaction deletes an account and any …\nThe base fields for all transaction models.\nThe address of an account to receive any leftover XRP after\nArbitrary destination tag that identifies a hosted …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn AccountSet transaction modifies the properties of an …\nTransactions of the AccountSet type support additional …\nAn iterator over the variants of AccountSetFlag\nTrack the ID of this account’s most recent transaction …\nEnable to allow another account to mint non-fungible …\nEnable rippling on this account’s trust lines by default.\nEnable Deposit Authorization on this account. (Added by …\nDisallow use of the master key pair. Can only be enabled …\nXRP should not be sent to this account. (Enforced by …\nFreeze all assets issued by this account.\nPermanently give up the ability to freeze individual trust …\nRequire authorization for users to hold balances issued by …\nRequire a destination tag to send transactions to this …\nUnique identifier of a flag to disable for this account.\nThe base fields for all transaction models.\nThe domain that owns this account, as a string of hex …\nHash of an email address to be used for generating an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPublic key for sending encrypted messages to this account. …\nSets an alternate account that is allowed to mint NFTokens …\nFlag to enable for this account.\nTick size to use for offers involving a currency issued by …\nThe fee to charge when users transfer this account’s …\nBid on an Automated Market Maker’s (AMM’s) auction …\nThe definition for one of the assets in the AMM’s pool.\nThe definition for the other asset in the AMM’s pool.\nA list of up to 4 additional accounts that you allow to …\nPay at most this LPToken amount for the slot. If the cost …\nPay at least this LPToken amount for the slot. Setting …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Automated Market Maker (AMM) instance for …\nThe first of the two assets to fund this AMM with. This …\nThe second of the two assets to fund this AMM with. This …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe fee to charge for trades against this AMM instance, in …\nDelete an empty Automated Market Maker (AMM) instance that …\nThe definition for one of the assets in the AMM’s pool.\nThe definition for the other asset in the AMM’s pool.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDeposit funds into an Automated Market Maker (AMM) instance\nTransactions of the AMMDeposit type support additional …\nAn iterator over the variants of AMMDepositFlag\nThe amount of one asset to deposit to the AMM. If present, …\nThe amount of another asset to add to the AMM. If present, …\nThe definition for one of the assets in the AMM’s pool.\nThe definition for the other asset in the AMM’s pool.\nThe maximum effective price, in the deposit asset, to pay …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHow many of the AMM’s LP Tokens to buy.\nVote on the trading fee for an Automated Market Maker …\nThe definition for one of the assets in the AMM’s pool.\nThe definition for the other asset in the AMM’s pool.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe proposed fee to vote for, in units of 1/100,000; a …\nWithdraw assets from an Automated Market Maker (AMM) …\nTransactions of the AMMWithdraw type support additional …\nAn iterator over the variants of AMMWithdrawFlag\nThe amount of one asset to withdraw from the AMM. This …\nThe amount of another asset to withdraw from the AMM. If …\nThe definition for one of the assets in the AMM’s pool.\nThe definition for the other asset in the AMM’s pool.\nThe minimum effective price, in LP Token returned, to pay …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHow many of the AMM’s LP Tokens to redeem.\nCancels an unredeemed Check, removing it from the ledger …\nThe ID of the Check ledger object to cancel, as a …\nThe base fields for all transaction models.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCancels an unredeemed Check, removing it from the ledger …\nRedeem the Check for exactly this amount, if possible. The …\nThe ID of the Check ledger object to cash, as a …\nThe base fields for all transaction models.\nRedeem the Check for at least this amount and for as much …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a Check object in the ledger, which is a deferred …\nThe base fields for all transaction models.\nThe unique address of the account that can cash the Check.\nArbitrary tag that identifies the reason for the Check, or …\nTime after which the Check is no longer valid, in seconds …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nArbitrary 256-bit hash representing a specific reason or …\nMaximum amount of source currency the Check is allowed to …\nA DepositPreauth transaction gives another account …\nThe XRP Ledger address of the sender to preauthorize.\nThe base fields for all transaction models.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe XRP Ledger address of a sender whose preauthorization …\nCancels an Escrow and returns escrowed XRP to the sender.\nThe base fields for all transaction models.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTransaction sequence (or Ticket number) of EscrowCreate …\nAddress of the source account that funded the escrow …\nCreates an Escrow, which requests XRP until the escrow …\nAmount of XRP, in drops, to deduct from the sender’s …\nThe time, in seconds since the Ripple Epoch, when this …\nThe base fields for all transaction models.\nHex value representing a PREIMAGE-SHA-256 crypto-condition.\nAddress to receive escrowed XRP.\nArbitrary tag to further specify the destination for this …\nThe time, in seconds since the Ripple Epoch, when the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFinishes an Escrow and delivers XRP from a held payment to …\nThe type of transaction.\nHex value matching the previously-supplied …\nReturns the argument unchanged.\nHex value of the PREIMAGE-SHA-256 crypto-condition …\nCalls <code>U::from(self)</code>.\nTransaction sequence of EscrowCreate transaction that …\nAddress of the source account that funded the held payment.\nA collection was defined to be empty.\nA collection contains an invalid value.\nA collection is not allowed to have duplicates in it.\nA collection has too few items in it.\nA collection has too many items in it.\nA field can only be defined if a transaction flag is set.\nAn account set flag can only be set if a field is defined.\nAn account set flag can only be set if a field is defined.\nAn optional value is not allowed to be defined in a …\nAn optional value is not allowed to be defined in a …\nA field is expected to have a certain value to be deleted.\nAn optional value must be defined in a certain context.\nAn optional value must be defined in a certain context.\nAm account set flag can not be set and unset at the same …\nA field was defined and an account set flag that is …\nA field was defined that another field definition would …\nA fields value is not allowed to be the same as another …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAccept offers to buy or sell an NFToken.\nThe type of transaction.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis field is only valid in brokered mode, and specifies …\nIdentifies the NFTokenOffer that offers to buy the NFToken.\nIdentifies the NFTokenOffer that offers to sell the …\nRemoves a NFToken object from the NFTokenPage in which it …\nThe type of transaction.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe NFToken to be removed by this transaction.\nThe owner of the NFToken to burn. Only used if that owner …\nCancels existing token offers created using …\nThe type of transaction.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn array of IDs of the NFTokenOffer objects to cancel (not …\nCreates either a new Sell offer for an NFToken owned by …\nTransactions of the NFTokenCreateOffer type support …\nAn iterator over the variants of NFTokenCreateOfferFlag\nIf enabled, indicates that the offer is a sell offer. …\nIndicates the amount expected or offered for the …\nThe type of transaction.\nIf present, indicates that this offer may only be accepted …\nTime after which the offer is no longer active, in seconds …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIdentifies the NFToken object that the offer references.\nWho owns the corresponding NFToken. If the offer is to buy …\nThe NFTokenMint transaction creates a non-fungible token …\nTransactions of the NFTokenMint type support additional …\nAn iterator over the variants of NFTokenMintFlag\nAllow the issuer (or an entity authorized by the issuer) to\nThe minted NFToken can only be bought or sold for XRP. …\nThe minted NFToken can be transferred to others. If this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe issuer of the token, if the sender of the account is …\nAn arbitrary taxon, or shared identifier, for a series or …\nThe value specifies the fee charged by the issuer for …\nUp to 256 bytes of arbitrary data. In JSON, this should be …\nRemoves an Offer object from the XRP Ledger.\nThe type of transaction.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe sequence number (or Ticket number) of a previous …\nPlaces an Offer in the decentralized exchange.\nTransactions of the OfferCreate type support additional …\nAn iterator over the variants of OfferCreateFlag\nTreat the offer as a Fill or Kill order . The Offer never …\nTreat the Offer as an Immediate or Cancel order. The Offer …\nIf enabled, the Offer does not consume Offers that exactly …\nExchange the entire TakerGets amount, even if it means …\nThe type of transaction.\nTime after which the Offer is no longer active, in seconds …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn Offer to delete first, specified in the same way as …\nThe amount and type of currency being sold.\nThe amount and type of currency being bought.\nTransfers value from one account to another.\nTransactions of the Payment type support additional values …\nAn iterator over the variants of PaymentFlag\nOnly take paths where all the conversions have an …\nDo not use the default path; only use paths included in …\nIf the specified Amount cannot be sent without spending …\nThe amount of currency to deliver. For non-XRP amounts, …\nThe type of transaction.\nMinimum amount of destination currency this transaction …\nThe unique address of the account receiving the payment.\nArbitrary tag that identifies the reason for the payment …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nArbitrary 256-bit hash representing a specific reason or …\nArray of payment paths to be used for this transaction. …\nHighest amount of source currency this transaction is …\nClaim XRP from a payment channel, adjust the payment …\nTransactions of the PaymentChannelClaim type support …\nAn iterator over the variants of PaymentChannelClaimFlag\nRequest to close the channel. Only the channel source and …\nClear the channel’s Expiration time. (Expiration is …\nThe amount of XRP, in drops, authorized by the Signature. …\notal amount of XRP, in drops, delivered by this channel …\nThe unique ID of the channel, as a 64-character …\nThe type of transaction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe public key used for the signature, as hexadecimal. …\nThe signature of this claim, as hexadecimal. The signed …\nCreate a unidirectional channel and fund it with XRP.\nAmount of XRP, in drops, to deduct from the sender’s …\nThe time, in seconds since the Ripple Epoch, when this …\nThe type of transaction.\nAddress to receive XRP claims against this channel. This …\nArbitrary tag to further specify the destination for this …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe 33-byte public key of the key pair the source will use …\nAmount of time the source address must wait before closing …\nAdd additional XRP to an open payment channel, and …\nAmount of XRP, in drops to add to the channel. Must be a …\nThe unique ID of the channel to fund, as a 64-character …\nThe type of transaction.\nNew Expiration time to set for the channel, in seconds …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSee EnableAmendment: …\nAn iterator over the variants of EnableAmendmentFlag\nSupport for this amendment increased to at least 80% of …\nSupport for this amendment decreased to less than 80% of …\nThe custom fields for the EnableAmendment model.\nThe type of transaction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSee SetFee: <code>&lt;https://xrpl.org/setfee.html&gt;</code>\nThe custom fields for the SetFee model.\nThe type of transaction.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSee UNLModify: <code>&lt;https://xrpl.org/unlmodify.html&gt;</code>\nAn iterator over the variants of UNLModifyDisabling\nThe type of transaction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe custom fields for the UNLModify model.\nYou can protect your account by assigning a regular key …\nThe type of transaction.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA base-58-encoded Address that indicates the regular key …\nThe SignerList object type represents a list of parties …\nThe type of transaction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>SignerEntry</code>.\nA target number for the signer weights. A multi-signature …\nA target number for the signer weights. A multi-signature …\nSets aside one or more sequence numbers as Tickets.\nThe type of transaction.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHow many Tickets to create. This must be a positive number …\nUnfreeze the trust line.\nDisable the No Ripple flag, allowing rippling on this …\nAuthorize the other party to hold currency issued by this …\nFreeze the trust line.\nEnable the No Ripple flag, which blocks rippling between …\nCreate or modify a trust line linking two accounts.\nTransactions of the TrustSet type support additional values\nAn iterator over the variants of TrustSetFlag\nThe type of transaction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nObject defining the trust line to create or modify, in the …\nValue incoming balances on this trust line at the ratio of …\nValue outgoing balances on this trust line at the ratio of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nClears the MinAccountCreateAmount of the bridge.\nAn iterator over the variants of XChainModifyBridgeFlags\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConverter to byte array with endianness.\nException for invalid XRP Ledger amount data.\nDetermine if the address string is a hex address.\nTests if value is a valid 3-char iso code.\nTests if value is a valid 40-char hex currency string.\nConversions between the XRP Ledger’s ‘Ripple Epoch’ …\nReturn the byte array of self.\nConversions between XRP drops and native number types.\nContains the error value\nContains the success value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParse an NFTokenID into the information it is encoding.\nUnscrambles or rescrambles a taxon in an NFTokenID.\nThe maximum time that can be expressed on the XRPL\nThe “Ripple Epoch” of 2000-01-01T00:00:00 UTC\nConvert from a POSIX-like timestamp to an XRP Ledger ‘…\nConvert from XRP Ledger ‘Ripple Epoch’ time to a …\nMaximum possible drops of XRP\nMaximum IC exponent\nMaximum IC precision\n100 billion decimal XRP\nMinimum IC exponent\nOne drop in decimal form.\nDrops in one XRP\nConvert from drops to decimal XRP. Return an equivalent …\nValidates the format of an issued currency amount value.\nValidate if a provided XRP amount is valid.\nConvert a numeric XRP amount to drops of XRP. Return an …\nThe cryptographic keys needed to control an XRP Ledger …\nThe address that publicly identifies this wallet, as a …\nGenerates a new seed and Wallet.\nReturns a string representation of a Wallet.\nReturns the argument unchanged.\nReturns the X-Address of the Wallet’s account.\nCalls <code>U::from(self)</code>.\nGenerate a new Wallet.\nThe private key that is used to create signatures, as a …\nThe public key that is used to identify this wallet’s …\nThe seed from which the public and private keys are …\nThe next available sequence number to use for transactions …\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")