searchState.loadedDescShard("typemap", 0, "A type-based key value store where one value type is …\nA marker trait meant for use as the <code>A</code> parameter in <code>TypeMap</code>.\nA version of <code>TypeMap</code> containing only <code>Clone</code> types.\nA marker trait meant for use as the <code>A</code> parameter in <code>TypeMap</code>.\nA version of <code>TypeMap</code> containing only <code>Debug</code> types.\nA view onto an entry in a TypeMap.\nThis trait defines the relationship between keys and …\nA view onto an occupied entry in a TypeMap.\nA view onto an occupied entry in a TypeMap.\nA version of <code>TypeMap</code> containing only <code>Send</code> types.\nA version of <code>TypeMap</code> containing only <code>Clone + Send + Sync</code> …\nA version of <code>TypeMap</code> containing only <code>Debug + Send + Sync</code> …\nA version of <code>TypeMap</code> containing only <code>Send + Sync</code> types.\nA version of <code>TypeMap</code> containing only <code>Sync</code> types.\nA map keyed by types.\nA view onto an unoccupied entry in a TypeMap.\nA view onto an unoccupied entry in a TypeMap.\nThe value type associated with this key type.\nRemove all entries from the map.\nCheck if a key has an associated value stored in the map.\nCreate a new, empty TypeMap.\nRead the underlying HashMap\nGet a mutable reference to the underlying HashMap\nGet the given key’s corresponding entry in the map for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference to the entry’s value.\nFind a value in the map and get a reference to it.\nGet a mutable reference to the entry’s value.\nFind a value in the map and get a mutable reference to it.\nSet the entry’s value and return the previous value.\nSet the entry’s value and return a mutable reference to …\nInsert a value into the map with a specified key type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransform the entry into a mutable reference with the same …\nReturn true if the map contains no values.\nGet the number of values stored in the map.\nCreate a new, empty TypeMap.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nMove the entry’s value out of the map, consuming the …\nRemove a value from the map.")