searchState.loadedDescShard("axum_extra", 0, "Extra utilities for <code>axum</code>.\nAdditional bodies.\n<code>Either*</code> types for combining extractors or responses into a …\nAdditional extractors.\nAdditional handler utilities.\nAdditional middleware utilities.\nAdditional types for generating responses.\nAdditional types for defining routes.\nCombines two extractors or responses into a single type.\nCombines three extractors or responses into a single type.\nCombines four extractors or responses into a single type.\nCombines five extractors or responses into a single type.\nCombines six extractors or responses into a single type.\nCombines seven extractors or responses into a single type.\nCombines eight extractors or responses into a single type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCache results of other extractors.\nExtractor that resolves the host of the request.\nExtractor that extracts path arguments the same way as <code>Path</code>…\nExtractor for customizing extractor rejections\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the wrapped extractor\nExtractor that parses <code>multipart/form-data</code> requests …\nRejection response types.\nA single field in a multipart stream.\nRejection type used if the <code>boundary</code> in a …\nExtractor that parses <code>multipart/form-data</code> requests …\nErrors associated with parsing <code>multipart/form-data</code> …\nRejection used for <code>Multipart</code>.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nGet the full data of the field as <code>Bytes</code>.\nStream a chunk of the field data.\nGet the content type of the field.\nThe file name found in the <code>Content-Disposition</code> header.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a map of headers as <code>HeaderMap</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the <code>Multipart</code> into a stream of its fields.\nThe field name found in the <code>Content-Disposition</code> header.\nYields the next <code>Field</code> if available.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nGet the full field data as text.\nRejection type used if the <code>Host</code> extractor is unable to …\nRejection used for <code>Host</code>.\nGet the response body text used for this rejection.\nGet the response body text used for this rejection.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the status code used for this rejection.\nGet the status code used for this rejection.\nThe type of future calling this handler returns.\nTrait for async functions that can be used to handle …\nA <code>Handler</code> created from a <code>HandlerCallWithExtractors</code>.\n<code>Handler</code> that runs one <code>Handler</code> and if that rejects it’ll …\nCall the handler with the extracted inputs.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this <code>HandlerCallWithExtractors</code> into <code>Handler</code>.\nChain two handlers together, running the second one if the …\nConvert an <code>Option&lt;Layer&gt;</code> into a <code>Layer</code>.\nA CSS response.\nA JavaScript response.\nA WASM response.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate forms to use in responses.\nCreate multipart forms to be used in API responses.\nA single part of a multipart form as defined by …\nCreate a new part containing a generic file, with a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new part with more fine-grained control over the …\nCreate a new part with <code>Content-Type</code> of <code>text/plain</code> with the …\nInitialize a new multipart form with the provided vector …\nA resource which defines a set of conventional CRUD routes.\nExtension trait that adds additional methods to <code>Router</code>.\nAdd a handler at <code>POST /{resource_name}</code>.\nAdd a handler at …\nAdd a handler at …\nReturns the argument unchanged.\nAdd a handler at <code>GET /{resource_name}</code>.\nCalls <code>U::from(self)</code>.\nCreate a <code>Resource</code> with the given name.\nAdd a handler at <code>GET /{resource_name}/new</code>.\nAdd another route to the router with an additional “…\nAdd another route to the router with an additional “…\nAdd a handler at <code>GET /&lt;resource_name&gt;/{&lt;resource_name&gt;_id}</code>.\nAdd a handler at …")