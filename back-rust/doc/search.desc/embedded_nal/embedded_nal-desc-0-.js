searchState.loadedDescShard("embedded_nal", 0, "embedded-nal - A Network Abstraction Layer for Embedded …\nThis is the host address type to be returned by …\nThis trait is an extension trait for <code>TcpStack</code> and <code>UdpStack</code> …\nResult is either a <code>A</code> record, or a <code>AAAA</code> record\nThe type returned when we have an error\nThe type returned when we have an error\nThe type returned when we have an error\nResult is <code>A</code> record\nResult is <code>AAAA</code> record\nSome other error has occurred.\nThe socket has been closed in the direction in which the …\nSharable wrapper for a network stack implementation.\nSingle-thread shared reference to an internal network …\nThis trait is implemented by TCP/IP stacks. You could, for …\nMethods to resolve errors into identifiable, actionable …\nRepresents specific errors encountered during TCP …\nThis trait is implemented by TCP/IP stacks that expose TCP …\nThe type returned when we create a new TCP socket\nThis trait is implemented by UDP/IP stacks. You could, for …\nThis trait is implemented by UDP/IP stacks.  It provides …\nThe type returned when we create a new UDP socket\nAccept an active connection request on a listening socket.\nReturns a shared reference to the driver that can be used …\nCreate a new TCP socket and bind it to the specified local …\nBind a UDP socket with a specified port\nClose an existing TCP socket.\nClose an existing UDP socket.\nConnect to the given remote host and port.\nConnect a UDP socket with a peer using a dynamically …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nResolve the hostname of a host, given its ip address.\nResolve the first ip address of a host, given its hostname …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines the kind of error that occurred.\nBegin listening for connection requests on a …\nCreate a new SharedStack that contains and uses some other …\nReceive data from the stream.\nRead a datagram the remote host has sent to us.\nWrite to the stream.\nSend a datagram to the remote host.\nSend a packet to a remote host/port.\nOpen a socket for usage as a TCP client.\nAllocate a socket for further use.")