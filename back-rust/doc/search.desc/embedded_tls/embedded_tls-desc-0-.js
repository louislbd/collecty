searchState.loadedDescShard("embedded_tls", 0, "Embedded-TLS\n1024 bytes\n2048 bytes\n4096 bytes\n512 bytes\nMaximum plaintext fragment length\nSHA-256 hasher.\nSHA-384 hasher.\nRepresents a TLS 1.3 cipher suite\nType representing an async TLS connection. An instance of …\nA TLS 1.3 verifier.\nClose a connection instance, returning the ownership of …\nForce all previously written, buffered bytes to be encoded …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new verification instance.\nCreate a new TLS connection with the provided context and …\nOpen a TLS connection, performing the handshake with the …\nRead and decrypt data filling the provided slice.\nReads buffered data. If nothing is in memory, it’ll wait …\nReads buffered data. If nothing is in memory, it’ll wait …\nVerify a certificate.\nVerify the certificate signature.\nEncrypt and send the provided slice over the connection. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n1024 bytes\n2048 bytes\n4096 bytes\n512 bytes\nMaximum plaintext fragment length\nSHA-256 hasher.\nSHA-384 hasher.\nRepresents a TLS 1.3 cipher suite\nType representing a TLS connection. An instance of this …\nA TLS 1.3 verifier.\nClose a connection instance, returning the ownership of …\nEnable RSA ciphers even if they might not be supported.\nForce all previously written, buffered bytes to be encoded …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new verification instance.\nCreate a new TLS connection with the provided context and …\nCreate a new context with a given config and random number …\nOpen a TLS connection, performing the handshake with the …\nRead and decrypt data filling the provided slice.\nReads buffered data. If nothing is in memory, it’ll wait …\nReads buffered data. If nothing is in memory, it’ll wait …\nResets the max fragment length to 14 bits (16384).\nVerify a certificate.\nVerify the certificate signature.\nConfigures the maximum plaintext fragment size.\nEncrypt and send the provided slice over the connection. …\nA reference to consume bytes from the internal buffer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsumes and returns a slice of at most <code>count</code> bytes.\nConsumes and returns a slice of at most <code>count</code> bytes.\nConsumes and returns a slice of at most <code>count</code> bytes.\nConsumes and returns the internal buffer.\nTries to fills the buffer by consuming and copying bytes …\nDrops the reference and restores internal buffer.")