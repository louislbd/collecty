searchState.loadedDescShard("nickel", 0, "Contains the error value\nA server listeing on a socket\nNickel is the application object. It’s the surface that …\nNickelError is the basic error type for HTTP errors as …\nContains the success value\nConfiguration options for the server.\nA container for all the request data.\nThis trait provides convenience for translating a number …\nA container for the response\nRetrieve all values from the query for <code>key</code>, or <code>None</code> if …\nIn the case of an unrecoverable error while a stream is …\nDetaches the server thread.\nFlushes all writing of a response to the client.\nReturn an error with the appropriate status code for error …\nExtracts URL encoded data from the request body.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the first value from the query for <code>key</code>, or <code>None</code> …\nRegisters an error handler which will be invoked among …\nThe headers of this response.\nGet a mutable reference to the Headers.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the timeout for the keep-alive loop\nBind and listen for connections on the given host and port.\nBind and listen for connections on the given host and port.\nMacro to reduce the boilerplate required for using unboxed …\nA trait that makes mounting more convenient. Works the …\nCreates an instance of Nickel with default error handling.\nCreate a new middleware to serve an /favicon.ico file from …\nCreates a new middleware that mounts a middleware at a …\nCreates a new <code>NickelError</code> instance.\nCreate a new middleware to serve files from within a given …\nPass execution off to another Middleware\nConfiguration options for the server.\nthe original <code>hyper::server::Request</code>\nWhether the server should print the local address it is …\nExtracts URL encoded data from the URL query string.\nGet the Request’s referer header\nThe TemplateCache reload policy. Defaults to …\nRenders the given template bound with the given data.\na <code>HashMap&lt;String, String&gt;</code> holding all params with names …\nA <code>Router</code> assigns <code>Middleware</code> to paths and resolves them per …\nCreate a new middleware to serve as a router.\nWrites a response\nWrites a file to the output.\nModify the response with the provided data.\nSets the header if not already set.\nGets the <code>SocketAddr</code> which the server is currently …\nThe status of this response.\nGet a mutable reference to the status.\nThe number of threads the server should use or <code>None</code> to use …\nRegisters a middleware handler which will be invoked among …\nCreates an instance of Nickel with default error handling, …\nCreates an instance of Nickel with default error handling, …\nCreates and instance of Nickel with custom Options.\nCreates a new <code>NickelError</code> without a <code>Response</code>.\nRedirect the response to a given target\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRegisters a handler to be used for a specified method. A …\nRegisters a handler to be used for a specific DELETE …\nRegisters a handler to be used for a specific GET request. …\nRegisters a handler to be used for a specific OPTIONS …\nRegisters a handler to be used for a specific PATCH …\nRegisters a handler to be used for a specific POST request.\nRegisters a handler to be used for a specific PUT request.\nA Route is the basic data structure that stores both the …\nA RouteResult is what the router returns when <code>match_route</code> …\nThe Router’s job is it to hold routes and to resolve …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n202 Accepted [RFC7231, Section 6.3.3]\n208 Already Reported [RFC5842]\n502 Bad Gateway [RFC7231, Section 6.6.3]\n400 Bad Request [RFC7231, Section 6.5.1]\n409 Conflict [RFC7231, Section 6.5.8]\n100 Continue [RFC7231, Section 6.2.1]\n201 Created [RFC7231, Section 6.3.2]\n417 Expectation Failed [RFC7231, Section 6.5.14]\n424 Failed Dependency [RFC4918]\n403 Forbidden [RFC7231, Section 6.5.3]\n302 Found [RFC7231, Section 6.4.3]\n504 Gateway Timeout [RFC7231, Section 6.6.5]\n410 Gone [RFC7231, Section 6.5.9]\n505 HTTP Version Not Supported [RFC7231, Section 6.6.6]\n418 I’m a teapot [curiously, not registered by IANA, but …\n226 IM Used [RFC3229]\n507 Insufficient Storage [RFC4918]\n500 Internal Server Error [RFC7231, Section 6.6.1]\n411 Length Required [RFC7231, Section 6.5.10]\n423 Locked [RFC4918]\n508 Loop Detected [RFC5842]\n405 Method Not Allowed [RFC7231, Section 6.5.5]\n421 Misdirected Request RFC7540, Section 9.1.2\n301 Moved Permanently [RFC7231, Section 6.4.2]\n207 Multi-Status [RFC4918]\n300 Multiple Choices [RFC7231, Section 6.4.1]\n511 Network Authentication Required [RFC6585]\n204 No Content [RFC7231, Section 6.3.5]\n203 Non-Authoritative Information [RFC7231, Section 6.3.4]\n406 Not Acceptable [RFC7231, Section 6.5.6]\n510 Not Extended [RFC2774]\n404 Not Found [RFC7231, Section 6.5.4]\n501 Not Implemented [RFC7231, Section 6.6.2]\n304 Not Modified [RFC7232, Section 4.1]\n200 OK [RFC7231, Section 6.3.1]\n206 Partial Content [RFC7233, Section 4.1]\n413 Payload Too Large [RFC7231, Section 6.5.11]\n402 Payment Required [RFC7231, Section 6.5.2]\n308 Permanent Redirect [RFC7238]\n412 Precondition Failed [RFC7232, Section 4.2]\n428 Precondition Required [RFC6585]\n102 Processing [RFC2518]\n407 Proxy Authentication Required [RFC7235, Section 3.2]\n416 Range Not Satisfiable [RFC7233, Section 4.4]\n431 Request Header Fields Too Large [RFC6585]\n408 Request Timeout [RFC7231, Section 6.5.7]\n205 Reset Content [RFC7231, Section 6.3.6]\n303 See Other [RFC7231, Section 6.4.4]\n503 Service Unavailable [RFC7231, Section 6.6.4]\nAn HTTP status code (<code>status-code</code> in RFC 7230 et al.).\n101 Switching Protocols [RFC7231, Section 6.2.2]\n307 Temporary Redirect [RFC7231, Section 6.4.7]\n429 Too Many Requests [RFC6585]\n401 Unauthorized [RFC7235, Section 3.1]\n451 Unavailable For Legal Reasons [RFC7725]\n422 Unprocessable Entity [RFC4918]\nA status code not in the IANA HTTP status code registry or …\n415 Unsupported Media Type [RFC7231, Section 6.5.13]\n426 Upgrade Required [RFC7231, Section 6.5.15]\n414 URI Too Long [RFC7231, Section 6.5.12]\n305 Use Proxy [RFC7231, Section 6.4.5]\n506 Variant Also Negotiates [RFC2295]\nGet the standardised <code>reason-phrase</code> for this status code.\nDetermine the class of a status code, based on its first …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if class is ClientError.\nCheck if class is Informational.\nCheck if class is Redirection.\nCheck if class is ServerError.\nCheck if class is NoClass\nCheck if class is Success.\nCheck every time the template is rendered.\nNever check for changes. Once loaded, templates will not …\nCheck after a period of time. For example, with a duration …\nReloadPolicy controls how often the modification time of …\nCache of compiled mustache templates\nRemove all cache entries\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nForce a reload of a template into the cache\nRender the template at <code>path</code> to <code>writer</code> with <code>data</code>. Templates …\nCreate a TemplateCache with the specified reload policy")