searchState.loadedDescShard("embedded_websocket_embedded_io", 0, "Embedded Websocket\nThe server or client opening handshake failed\nBinary data\nBinary data\nSignals that the close handshake is complete\nSignals that the other party has initiated the close …\nA Close websocket frame has been received\nA close message in response to a close message from the …\nThe <code>close()</code> function has been called\nThe close handshake has been completed\nThe client has created an opening handshake\nCustom close code\nEmpty (1005) indicates that no status code was present\nEndpoint unavailable (1001) indicates that an endpoint is …\nContains the error value\nWebsocket specific errors\nInternal server error (1011) indicates that a server is …\nInvalid message type (1003) indicates that an endpoint is …\nWebsocket frame has an invalid opcode\nInvalid payload data (1007) indicates that an endpoint is …\nMandatory extension (1010) indicates that an endpoint …\nMessage too big (1009) indicates that an endpoint is …\nThe websocket has been created with <code>new_client()</code> or …\nNormal closure (1000), meaning that the purpose for which …\nContains the success value\nThe server has completed the opening handshake via …\nAn unsolicited ping message\nA ping message that you should respond to with a …\nPolicy violation (1008) indicates that an endpoint is …\nA pong message in response to a ping message\nA pong message in response to a ping message\nProtocol error (1002) indicates that an endpoint is …\nReserved (1004) for future use\nResult returning a websocket specific error if encountered\nA UTF8 encoded text string\nA UTF8 encoded text string\nTLS handshake (1015) connection was closed due to a …\nWebsocket client and server implementation\nUsed to return a sized type from …\nWebsocket close status code as per the rfc6455 websocket …\nWebsocket details extracted from the http header\nA fixed length 24-character string used to hold a …\nWebsocket options used by a websocket client to initiate …\nThe metadata result of a <code>read</code> function call of a websocket\nWebsocket receive message type use when reading a …\nWebsocket send message type used when sending a websocket …\nUsed to return a sized type from <code>WebSocket::new_server()</code>\nThe state of the websocket\nA maximum sized 24-character string used to store a sub …\nAny additional headers the server may require that are not …\nUsed by a websocket client for checking the server …\nUsed by the client to initiate a websocket opening …\nInitiates a close handshake. Both the client and server …\nClose status code (as per the websocket spec) if the …\nEnd of message flag is <code>true</code> if the <code>to</code> buffer contains an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe hostname (e.g. <code>server.example.com</code>) is used so that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of bytes read from the <code>from</code> buffer\nNumber of bytes written to the <code>to</code> buffer\nThe websocket frame type\nCreates a new websocket client by passing in a required …\nCreates a new websocket server. Note that you must use the …\nThe origin (e.g. <code>http://example.com</code>) is used to protect …\nThe request uri (e.g. <code>/chat?id=123</code>) of the GET method used …\nReads the payload from a websocket frame in buffer <code>from</code> …\nReads an http header and extracts websocket specific …\nThe websocket key user to build the accept string to …\nThe list of sub protocols is restricted to a maximum of 3\nUsed by the server to accept an incoming client connection …\nA list of requested sub protocols in order of preference. …\nWrites the payload in <code>from</code> to a websocket frame in <code>to</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe other end initiated a close handshake. The contents of …\nWe received a ping message from the other end A pong …\nWe received a pong message in response to a ping message …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")