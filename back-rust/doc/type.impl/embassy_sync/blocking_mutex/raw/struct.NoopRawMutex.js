(function() {
    var type_impls = Object.fromEntries([["xrpl",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NoopRawMutex\" class=\"impl\"><a class=\"src rightside\" href=\"src/embassy_sync/blocking_mutex/raw.rs.html#74\">source</a><a href=\"#impl-NoopRawMutex\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"embassy_sync/blocking_mutex/raw/struct.NoopRawMutex.html\" title=\"struct embassy_sync::blocking_mutex::raw::NoopRawMutex\">NoopRawMutex</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/embassy_sync/blocking_mutex/raw.rs.html#76\">source</a><h4 class=\"code-header\">pub const fn <a href=\"embassy_sync/blocking_mutex/raw/struct.NoopRawMutex.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"embassy_sync/blocking_mutex/raw/struct.NoopRawMutex.html\" title=\"struct embassy_sync::blocking_mutex::raw::NoopRawMutex\">NoopRawMutex</a></h4></section></summary><div class=\"docblock\"><p>Create a new <code>NoopRawMutex</code>.</p>\n</div></details></div></details>",0,"xrpl::asynch::clients::SingleExecutorMutex"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RawMutex-for-NoopRawMutex\" class=\"impl\"><a class=\"src rightside\" href=\"src/embassy_sync/blocking_mutex/raw.rs.html#81\">source</a><a href=\"#impl-RawMutex-for-NoopRawMutex\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"embassy_sync/blocking_mutex/raw/trait.RawMutex.html\" title=\"trait embassy_sync::blocking_mutex::raw::RawMutex\">RawMutex</a> for <a class=\"struct\" href=\"embassy_sync/blocking_mutex/raw/struct.NoopRawMutex.html\" title=\"struct embassy_sync::blocking_mutex::raw::NoopRawMutex\">NoopRawMutex</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.INIT\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/embassy_sync/blocking_mutex/raw.rs.html#82\">source</a><a href=\"#associatedconstant.INIT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"embassy_sync/blocking_mutex/raw/trait.RawMutex.html#associatedconstant.INIT\" class=\"constant\">INIT</a>: <a class=\"struct\" href=\"embassy_sync/blocking_mutex/raw/struct.NoopRawMutex.html\" title=\"struct embassy_sync::blocking_mutex::raw::NoopRawMutex\">NoopRawMutex</a> = _</h4></section></summary><div class='docblock'>Create a new <code>RawMutex</code> instance. <a href=\"embassy_sync/blocking_mutex/raw/trait.RawMutex.html#associatedconstant.INIT\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lock\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/embassy_sync/blocking_mutex/raw.rs.html#83\">source</a><a href=\"#method.lock\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"embassy_sync/blocking_mutex/raw/trait.RawMutex.html#tymethod.lock\" class=\"fn\">lock</a>&lt;R&gt;(&amp;self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; R) -&gt; R</h4></section></summary><div class='docblock'>Lock this <code>RawMutex</code>.</div></details></div></details>","RawMutex","xrpl::asynch::clients::SingleExecutorMutex"],["<section id=\"impl-Send-for-NoopRawMutex\" class=\"impl\"><a class=\"src rightside\" href=\"src/embassy_sync/blocking_mutex/raw.rs.html#72\">source</a><a href=\"#impl-Send-for-NoopRawMutex\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"embassy_sync/blocking_mutex/raw/struct.NoopRawMutex.html\" title=\"struct embassy_sync::blocking_mutex::raw::NoopRawMutex\">NoopRawMutex</a></h3></section>","Send","xrpl::asynch::clients::SingleExecutorMutex"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[4065]}